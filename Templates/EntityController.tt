using AddAppAPI.Helpers;
using AddAppAPI.Models;
using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using System.Web.Http;

namespace AddAppAPI.Controllers
{
    [RoutePrefix("api/<#= this.EntityName #>")]
    public class <#= this.EntityName #>Controller : ApiController
    {
        private ISqlHelper sqlHelper;

        public <#= this.EntityName #>Controller()
        {
            this.sqlHelper = new SqlHelper();
        }

        public <#= this.EntityName #>Controller(ISqlHelper sqlHelper)
        {
            this.sqlHelper = sqlHelper;
        }

<#if(!string.IsNullOrEmpty(this.KeyColumnCategory) && this.KeyColumnCategory.Equals("primary")){#>
        // GET: api/<#= this.EntityName #>
        public async Task<IHttpActionResult> Get()
        {
            var <#= this.PluralCaseEntityName #> = await this.sqlHelper.SelectAllAsync<<#= this.EntityName #>>();
            return Content(HttpStatusCode.OK, <#= this.PluralCaseEntityName #>);
        }

        // GET: api/<#= this.EntityName #>/5
        public async Task<IHttpActionResult> Get(<#= this.KeyColumnType #> id)
        {
			var parameters = new List<Parameter>();
			parameters.Add(new Parameter { Name = "id", Value = id });
            var <#= this.LowerCaseEntityName #> = await this.sqlHelper.SelectOneAsync<<#= this.EntityName #>>(parameters);
            if (<#= this.LowerCaseEntityName #> != null)
            {
                return Content(HttpStatusCode.OK, <#= this.LowerCaseEntityName #>);
            }
            else
            {
                var message = string.Format("No <#= this.EntityName #> found for <#= this.LowerCaseEntityName #> id:{0}", id);
                return Content(HttpStatusCode.NotFound, message);
            }
        }

<#if(this.FkColumns.Count > 0 && this.HasIdColumn){#>
<#foreach (var c in this.FkColumns){
	var methodName = string.Format("Get{0}IdsBy{1}", this.EntityName, c.ReferencingColumnName);
#>
		[HttpGet]
		[Route("<#= methodName #>")]
        public async Task<IHttpActionResult> <#= methodName #>(<#= $"{c.DotNetType} id" #>)
        {
			var parameters = new List<Parameter>();
			parameters.Add(new Parameter { Name = "<#= c.ReferencingColumnName #>", Value = id });
			List<<#= this.KeyColumnType #>> ids = await this.sqlHelper.SelectIdsAsync<<#= this.EntityName #>, <#= this.KeyColumnType #>>(parameters);
			return Content(HttpStatusCode.OK, ids);
        }
<#}}#>
<#if(HasNameColumn){#>

        // GET: api/<#= this.EntityName #>/GetIdNamepairs
        [HttpGet]
        [Route("GetIdNamepairs")]
        public async Task<IHttpActionResult> GetIdNamepairs()
        {
            var idNamePairs = await this.sqlHelper.SelectIdNamePairsAsync<<#= this.EntityName #>, <#= this.KeyColumnType #>, string>();
            return Content(HttpStatusCode.OK, idNamePairs);
        }

<#}else{#>

<#}#>
		// PUT: api/<#= this.EntityName #>/5
        public async Task<IHttpActionResult> Put(<#= this.KeyColumnType #> id, <#= this.EntityName #> <#= this.LowerCaseEntityName #>)
        {
            if (id != <#= this.LowerCaseEntityName #>.Id)
            {
                var message = string.Format("id:'{0}' not matching with <#= this.LowerCaseEntityName #> id:'{1}'", id, <#= this.LowerCaseEntityName #>.Id);
                return Content(HttpStatusCode.BadRequest, message);
            }

            var success = await this.sqlHelper.UpdateAsync<<#= this.EntityName #>>(<#= this.LowerCaseEntityName #>);
            if (success)
            {
                return Content(HttpStatusCode.OK, id);
            }
            else
            {
                var message = string.Format("No <#= this.EntityName #> found for <#= this.LowerCaseEntityName #> id:'{0}'", id);
                return Content(HttpStatusCode.NotFound, message);
            }
        }
<#}#>

        // POST: api/<#= this.EntityName #>
        public async Task<IHttpActionResult> Post(<#= this.EntityName #> <#= this.LowerCaseEntityName #>)
        {
<#if(!string.IsNullOrEmpty(this.KeyColumnCategory) && this.KeyColumnCategory.Equals("primary")){#>
            <#= this.KeyColumnType #> id = await this.sqlHelper.InsertOneAsync<<#= this.EntityName #>, <#= this.KeyColumnType #>>(<#= this.LowerCaseEntityName #>);
            return Content(HttpStatusCode.OK, id);
<#}else{#>
			await this.sqlHelper.InsertOneAsync<<#= this.EntityName #>, object>(<#= this.LowerCaseEntityName #>);
            return Ok();
<#}#>
        }

        // DELETE: api/<#= this.EntityName #>/5
        public async Task<IHttpActionResult> Delete(<#= this.KeyColumnAndDotNetTypeList #>)
        {
			var parameters = new List<Parameter>();
<#foreach(var c in KeyColumns){#>
			parameters.Add(new Parameter { Name = "<#= c.Name #>", Value = <#= c.DotNetVariableName #> });

<#}#>
            var success = await this.sqlHelper.DeleteAsync<<#= this.EntityName #>>(parameters);
            if (success)
            {
                return Ok();
            }
            else
            {
                var message = string.Format("No <#= this.EntityName #> found for given <#= this.KeyColumnDotNetVariableNameList #>");
                return Content(HttpStatusCode.NotFound, message);
            }
        }
    }
}


<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DatabaseScriptsGenerator" #>
<#+
public string EntityName { get; set; }
public string LowerCaseEntityName { get; set; }
public string PluralCaseEntityName { get; set; }
public string KeyColumnType { get; set; }
public string KeyColumnCategory { get; set; }
public bool HasNameColumn { get; set; }
public List<ColumnInfo> KeyColumns { get; set; }
public string KeyColumnAndDotNetTypeList { get; set; }
public string KeyColumnDotNetVariableNameList { get; set; }
public bool HasIdColumn { get; set; }
public List<ColumnInfo> FkColumns { get; set; }
#>